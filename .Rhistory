caseN - caseDataLong$N[cat], ctrlN - ctrlDataLong$N[cat]), 2)
if(sum(Table < 5) < 1 && sum((chisq.test(Table, simulate.p.value = TRUE)$expected) < 5) < 1){
Test_pvalue[length(Test_pvalue)+1] <- chisq.test(Table, correct = FALSE)$p.value < pvalue
}else{
Test_pvalue[length(Test_pvalue)+1] <- fisher.test(Table, alternative = "greater")$p.value < pvalue
}
}else{
Test_pvalue[length(Test_pvalue)+1] <- FALSE
}
}
if(sum(Test_pvalue) == 0){
return(message("There is no significant category between case and control"))
}else{
groupedDataLong <- groupedDataLong[,list(sum = sum(N)),by = DiagnosticCategory][order(sum,decreasing = TRUE)]
groupedDataLong <- groupedDataLong[1:topN,][order(sum),"DiagnosticCategory"]
groupedDataLong[,"DiagnosticCategory" := factor(DiagnosticCategory, levels = groupedDataLong$DiagnosticCategory),]
dignosticCate <- merge(groupedDataLong, rbind(caseDataLong[Test_pvalue,],ctrlDataLong[Test_pvalue,]),all.x = TRUE)[!is.na(Group),]
dignosticCate[,c("Group","Percentage") := list(factor(Group, levels = unique(dignosticCate$Group)),
Percentage),]
dignosticCate <- dignosticCate[order(DiagnosticCategory, Group, N, decreasing = TRUE),]
g <- ggplot(dignosticCate, aes(fill =  Group, y = Percentage, x = DiagnosticCategory, group = Group)) +
geom_text(aes(label = paste("n =", N)), hjust = 1, size = 3, color="white", position = position_dodge(width = 1)) +
geom_bar(position="dodge", stat="identity")
}
}else{
groupedDataWide <- groupedDataWide[ ,c(1:(ncol(groupedDataWide))) := lapply(.SD, function(x) ifelse(x >= 1L, 1L, 0L)), .SDcols = 1:(ncol(groupedDataWide))]
groupedDataLong <- melt(groupedDataWide, measure.vars = 1:ncol(groupedDataWide), variable.name = "DiagnosticCategory", value.name = "count")
groupedDataLong <- as.data.table(groupedDataLong)[,list(N = sum(count)), by = .(DiagnosticCategory)][order(N)][,Percentage := round(N/nrow(groupedDataWide)*100,2)][Percentage >= limitFreq,]
groupedDataLong <- groupedDataLong[][,c("DiagnosticCategory","Number","Percentage") :=
list(factor(DiagnosticCategory, levels = DiagnosticCategory),
nrow(groupedDataLong):1,
Percentage),][Number <= topN,]
dignosticCate <- groupedDataLong[,-"Number"][order(N, decreasing = TRUE),]
g <- ggplot(groupedDataLong, aes(y = Percentage, x = DiagnosticCategory)) +
geom_bar(position="dodge", stat="identity") +
geom_text(aes(label = paste("n =", N)), hjust = 1, size = 3, color="white", position = position_dodge(width = 1))
}
plot_title <- paste0(plot_title,": Top ", topN)
dignosticCate_graph <- g + coord_flip(clip = "off") +
xlab("Diagnostic category") + ylab("Diagnostic category, %") + ggtitle(plot_title) +
theme_bw() +
theme(axis.text.y = element_text(size = 10,face = "bold"),
axis.text.x = element_text(size = 10,face = "bold"))
return(list(graph = dignosticCate_graph,
sigCate = dignosticCate))
}
plotDiagCat(groupedDataWide, ID)
#' @rdname plotDiagCat
#' @export
plotDiagCat <- function(groupedDataWide, idColName, groupColName = NULL, topN = 10, limitFreq = 0.01, pvalue = 0.05){
Test_pvalue <- c()
plot_title <- "Diagnostic category"
groupedDataWide <- as.data.table(groupedDataWide)
setnames(groupedDataWide, deparse(substitute(idColName)), "ID")
groupedDataWide$ID <- NULL
if(deparse(substitute(groupColName)) != "NULL"){
setnames(groupedDataWide, deparse(substitute(groupColName)), "Group")
setcolorder(groupedDataWide, "Group")
groupedDataWide <- groupedDataWide[ ,c(2:(ncol(groupedDataWide))) := lapply(.SD, function(x) ifelse(x >= 1L, 1L, 0L)), .SDcols = 2:(ncol(groupedDataWide))]
groupedDataLong <- melt(groupedDataWide, id.vars = "Group",variable.name = "DiagnosticCategory", value.name = "count")
groupedDataLong <- as.data.table(groupedDataLong)[,list(N = sum(count)), by = list(Group, DiagnosticCategory)]
caseN <- sum(!grepl("non|[*]",groupedDataWide$Group))
ctrlN <- sum(grepl("non",groupedDataWide$Group))
caseDataLong <- groupedDataLong[!grepl("non|[*]",groupedDataLong$Group),][,Percentage := round((N/caseN)*100,2)]
ctrlDataLong <- groupedDataLong[grepl("non",groupedDataLong$Group),][,Percentage := round((N/ctrlN)*100,2)]
for(cat in 1:nrow(caseDataLong)){
if(caseDataLong$Percentage[cat] >= limitFreq | ctrlDataLong$Percentage[cat] >= limitFreq){
Table <- matrix(c(caseDataLong$N[cat], ctrlDataLong$N[cat],
caseN - caseDataLong$N[cat], ctrlN - ctrlDataLong$N[cat]), 2)
if(sum(Table < 5) < 1 && sum((chisq.test(Table, simulate.p.value = TRUE)$expected) < 5) < 1){
Test_pvalue[length(Test_pvalue)+1] <- chisq.test(Table, correct = FALSE)$p.value < pvalue
}else{
Test_pvalue[length(Test_pvalue)+1] <- fisher.test(Table, alternative = "greater")$p.value < pvalue
}
}else{
Test_pvalue[length(Test_pvalue)+1] <- FALSE
}
}
if(sum(Test_pvalue) == 0){
return(message("There is no significant category between case and control"))
}else{
groupedDataLong <- groupedDataLong[,list(sum = sum(N)),by = DiagnosticCategory][order(sum,decreasing = TRUE)]
groupedDataLong <- groupedDataLong[1:topN,][order(sum),"DiagnosticCategory"]
groupedDataLong[,"DiagnosticCategory" := factor(DiagnosticCategory, levels = groupedDataLong$DiagnosticCategory),]
dignosticCate <- merge(groupedDataLong, rbind(caseDataLong[Test_pvalue,],ctrlDataLong[Test_pvalue,]),all.x = TRUE)[!is.na(Group),]
dignosticCate[,c("Group","Percentage") := list(factor(Group, levels = unique(dignosticCate$Group)),
Percentage),]
dignosticCate <- dignosticCate[order(DiagnosticCategory, Group, N, decreasing = TRUE),]
g <- ggplot(dignosticCate, aes(fill =  Group, y = Percentage, x = DiagnosticCategory, group = Group)) +
geom_text(aes(label = paste("n =", N)), hjust = 1.1, size = 3, color="white", position = position_dodge(width = 1)) +
geom_bar(position="dodge", stat="identity")
}
}else{
groupedDataWide <- groupedDataWide[ ,c(1:(ncol(groupedDataWide))) := lapply(.SD, function(x) ifelse(x >= 1L, 1L, 0L)), .SDcols = 1:(ncol(groupedDataWide))]
groupedDataLong <- melt(groupedDataWide, measure.vars = 1:ncol(groupedDataWide), variable.name = "DiagnosticCategory", value.name = "count")
groupedDataLong <- as.data.table(groupedDataLong)[,list(N = sum(count)), by = .(DiagnosticCategory)][order(N)][,Percentage := round(N/nrow(groupedDataWide)*100,2)][Percentage >= limitFreq,]
groupedDataLong <- groupedDataLong[][,c("DiagnosticCategory","Number","Percentage") :=
list(factor(DiagnosticCategory, levels = DiagnosticCategory),
nrow(groupedDataLong):1,
Percentage),][Number <= topN,]
dignosticCate <- groupedDataLong[,-"Number"][order(N, decreasing = TRUE),]
g <- ggplot(groupedDataLong, aes(y = Percentage, x = DiagnosticCategory)) +
geom_bar(position="dodge", stat="identity") +
geom_text(aes(label = paste("n =", N)), hjust = 1.1, size = 3, color="white", position = position_dodge(width = 1))
}
plot_title <- paste0(plot_title,": Top ", topN)
dignosticCate_graph <- g + coord_flip(clip = "off") +
xlab("Diagnostic category") + ylab("Diagnostic category, %") + ggtitle(plot_title) +
theme_bw() +
theme(axis.text.y = element_text(size = 10,face = "bold"),
axis.text.x = element_text(size = 10,face = "bold"))
return(list(graph = dignosticCate_graph,
sigCate = dignosticCate))
}
plotDiagCat(groupedDataWide, ID)
cat(utils::packageDescription("dxpr")$Description)
build_references()
library(pkgdown)
library(roxygen2)
build_references()
build_reference()
build_articles()
View(test_Whole)
knitr::opts_chunk$set(collapse = T, comment = "#>")
options(tibble.print_min = 4L, tibble.print_max = 4L)
devtools::install_github("DHLab-TSENG/dxpr")
library(dxpr)
# Short to decimal
decimal <- icdDxShortToDecimal(dxDataFile = sampleDxFile,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015/10/01")
decimal$ICD[6:10]
build_articles()
build_home()
build_home()
build_home(pkg = 'README.Rmd')
build_site()
build_articles()
build_home()
build_home()
library(ggplot2)
library(dxpr)
library(roxg)
library(roxygen2)
library(datatable)
library(data.table)
library(pkgdown)
build_home()
library(curl)
build_home()
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
build_home()
httr::GET("cloud.r-project.org")
install.packages(c("curl", "httr"))
install.packages(c("curl", "httr"))
install.packages(c("curl", "httr"))
build_home()
library(pkgdown)
build_home()
build_home()
install.packages('dplyr', repos = 'https://cloud.r-project.org')
install.packages('dplyr', repos = 'https://cloud.r-project.org')
install.packages("dplyr", repos = "https://cloud.r-project.org")
install.packages("dplyr", repos = "https://cloud.r-project.org")
install.packages("pkgdown", repos = "https://cloud.r-project.org")
build_home()
library(pkgdown)
build_home()
build_home()
curl::curl_fetch_memory("https://cran.csie.ntu.edu.tw/")
build_home()
options(pkgdown.internet = FALSE)
build_home()
build_home()
knitr::opts_chunk$set(
fig.path = "README_files/"
)
build_home()
knitr::opts_chunk$set(
fig.path = "README_files/figure-gfm/"
)
build_home()
build_home()
build_articles()
build_articles()
devtools::install_github("DHLab-TSENG/dxpr")
library(dxpr)
build_articles()
build_articles()
knitr::opts_chunk$set(collapse = T, comment = "#>")
options(tibble.print_min = 4L, tibble.print_max = 4L)
devtools::install_github("DHLab-TSENG/dxpr")
groupedDataWide <- groupedDataLongToWide(ELIX$groupedDT,
idColName = ID,
categoryColName = Comorbidity,
dateColName = Date)
plot1 <- plotDiagCat(groupedDataWide = groupedDataWide,
idColName = ID,
topN = 10,
limitFreq = 0.01)
library(data.table)
library(ggplot2)
plotDiagCat(groupedDataWide = groupedDataWide,
idColName = ID,
topN = 10,
limitFreq = 0.01)
plotDiagCat(groupedDataWide = groupedDataWide,
idColName = ID,
topN = 10,
limitFreq = 0.01)
build_home()
build_home()
build_home()
?ggplot2::add_theme
build_reference()
build_reference()
build_reference()
build_reference()
library(roxygen2)
roxygenise()
build_reference()
roxygenise()
build_reference()
roxygenise()
roxygenise()
build_reference()
roxygenise()
build_reference()
roxygenise()
build_reference()
roxygenise()
build_reference()
groupedDataLongToWide(ELIX$groupedDT,
idColName = ID,
categoryColName = Comorbidity,
dateColName = Date,
selectedCaseFile = selectedCaseFile)
selectedCaseFile <- selectCases(dxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icdVerColName = NULL,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl2,
caseCondition = "Diseases of the urinary system",
caseCount = 1)
groupedDataWide <- groupedDataLongToWide(ELIX$groupedDT,
idColName = ID,
categoryColName = Comorbidity,
dateColName = Date,
selectedCaseFile = selectedCaseFile)
plotDiagCat(groupedDataWide = groupedDataWide,
idColName = ID,
topN = 10,
limitFreq = 0.01,
pvalue = 0.05)
plotDiagCat(groupedDataWide = groupedDataWide,
idColName = ID,
topN = 10,
limitFreq = 0.01,
pvalue = 0.05, groupColName = selectedCase)
roxygenise()
build_reference()
usethis::use_testthat()
devtools::test()
icdDxToCCS(sampleDxFile, ID, ICD, Date, NULL, "2015-10-01", FALSE))
icdDxToCCS(sampleDxFile, ID, ICD, Date, NULL, "2015-10-01", FALSE)
library(dxpr)
icdDxToCCS(sampleDxFile, ID, ICD, Date, NULL, "2015-10-01", FALSE)
icdDxDecimalToShort(sampleDxFile, ICD, Date, NULL, "2015-10-01", FALSE)
icdDxDecimalToShort(sampleDxFile, ICD, Date, NULL, "2015-10-01")
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$
)
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$Error
icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$Error[1]
df1 <- data.table("ICD" = "A0.11", "count" = 20, "IcdVersionInFile" = "ICD 10", "WrongType" = "Wrong formtat", "Suggestion" = "")
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$Error[1]
test_that("ICD short -> decimal",
{ expect_equal(df1, auto_df1)})
df1 <- data.table("ICD" = "A0.11", "count" = 20, "IcdVersionInFile" = "ICD 10", "WrongType" = "Wrong format", "Suggestion" = "")
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$Error[1]
test_that("ICD short -> decimal",
{ expect_equal(df1, auto_df1)})
icdDxDecimalToShort(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$Error
View(auto_df1)
icdDxDecimalToShort(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$ICD
icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$ICD
View(auto_df1)
df1 <- data.table("ICD" = "A0.11", "count" = 20, "IcdVersionInFile" = "ICD 10", "WrongType" = "Wrong format", "Suggestion" = "")
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
test_that("ICD short -> decimal Error",
{ expect_equal(auto_df1$Error[1], df1)})
test_that("ICD short -> decimal Type",
{ expect_equal(auto_df1$ICD[1], "Z99.2")})
test_that("ICD short -> decimal Error",
{ str(auto_df1$Error, "16 obs")}
)
test_that("ICD short -> decimal Error",
{str(auto_df1$Error, "16 obs")})
test_that("ICD short -> decimal Type",
{ expect_equal(auto_df1$ICD[1], "Z992")})
test_that("ICD short -> decimal Type",
{ as.character(expect_equal(auto_df1$ICD[1]), "Z992")})
test_that("ICD short -> decimal Type",
{ as.character(expect_equal(auto_df1$ICD[1])), "Z992")})
test_that("ICD short -> decimal Type",
{ as.character(expect_equal(auto_df1$ICD[1])), "Z992"})
test_that("ICD short -> decimal Type",
{ expect_equal(as.character(auto_df1$ICD[1]), "Z992")})
#icdStD
df1 <- data.table("ICD" = "A0.11", "count" = 20, "IcdVersionInFile" = "ICD 10", "WrongType" = "Wrong format", "Suggestion" = "")
auto_df1 <- icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
test_that("ICD short -> decimal Error",
{ expect_equal(auto_df1$Error[1], df1)})
test_that("ICD short -> decimal Error",
{str(auto_df1$Error, "16 obs")})
test_that("ICD short -> decimal Type",
{ expect_equal(as.character(auto_df1$ICD[1]), "Z99.2")})
#icdDtS
df2 <- data.table("ICD" = "A0.11", "count" = 20, "IcdVersionInFile" = "ICD 10", "WrongType" = "Wrong format", "Suggestion" = "")
auto_df2 <- icdDxDecimalToShort(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df2$Error[1], df2)})
test_that("ICD decimal -> short Error",
{str(auto_df2$Error, "16 obs")})
test_that("ICD decimal -> short Type",
{ expect_equal(as.character(auto_df2$ICD[1]), "Z99.2")})
auto_df2 <- icdDxDecimalToShort(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
icdDxDecimalToShort(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
icdDxShortTODecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")
test_that("ICD decimal -> short Type",
{ expect_equal(as.character(auto_df2$ICD[1]), "Z992")})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = "2009-07-25", "endCaseDate" = "2013-12-20", "count" = 5, "period" = "1609 days")
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_DT, df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = "2009-07-25", "endCaseDate" = "2013-12-20", "count" = 5, "period" = "1609 days")
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT, df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = "2009-07-25", "endCaseDate" = "2013-12-20", "count" = 5, "period" = "1609 days")
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = 2009-07-25, "endCaseDate" = 2013-12-20, "count" = 5, "period" = 1609 days)
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = 2009-07-25, "endCaseDate" = 2013-12-20, "count" = 5, "period" = 1609)
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date(2013-12-20), "count" = 5, "period" = 1609L)
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
as.Date("2009-07-25")
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date(2013-12-20), "count" = 5, "period" = 1609L)
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date(2013-12-20), "count" = 5, "period" = 1609)
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date("2013-12-20"), "count" = 5, "period" = 1609)
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date("2013-12-20"), "count" = 5, "period" = difftime(1609))
auto_df3 <- icdDxToCCS(sampleDxFile, ID, ICD, Date, icd10usingDate =  "2015-10-01", isDescription = TRUE)
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date("2013-12-20"), "count" = 5, "period" = difftime(1609L))
df3 <- data.table("ID" = "A0", "CCS_CATEGORY_DESCRIPTION" = "Chronic kidney disease", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date("2013-12-20"), "count" = 5, "period" = as.difftime(1609, units = "days"))
test_that("ICD decimal -> short Error",
{ expect_equal(auto_df3$summarised_groupedDT[1], df3)})
df4 <- data.table("ID" = "A0", "Comorbidity" = "RD", "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date("2013-12-20"), "count" = 5, "period" = as.difftime(1609, units = "days"))
auto_df4 <- icdDxToComorbid(sampleDxFile, ID, ICD, Date, icdVerColName = NULL, "2015-10-01", charlson)
test_that("ICD Comorbid",
{ expect_equal(auto_df4$summarised_groupedDT[1], df4)})
df5 <- data.table("ID" = "A2", "PheCode" = "585.31", "firstCaseDate" = as.Date("2015-08-12"), "endCaseDate" = as.Date("2020-05-22"), "count" = 2, "period" = as.difftime(1745, units = "days"))
auto_df5 <- icdDxToPheWAS(sampleDxFile, ID, ICD, Date, icdVerColName = NULL, "2015-10-01", FALSE)
test_that("ICD Comorbid",
{ expect_equal(auto_df5$summarised_groupedDT[1], df5)})
sc <- selectCases(dxDataFile = sampleDxFile,
ID, ICD, Date,
icdVerColName = NULL,
groupDataType = ccslvl2,
icd10usingDate = "2015/10/01",
caseCondition = "Diseases of the urinary system",
caseCount = 1)
sc$selectedCase == "selected"
length(sc$selectedCase == "Selected")
sum(sc$selectedCase == "Selected")
test_that("Select Cases",
{ expect_equal(sum(sc$selectedCase == "Selected"), 24L)})
groupedDataWide <- groupedDataLongToWide(auto_df4$groupedDT,
idColName = ID,
categoryColName = Comorbidity,
dateColName = Date)
View(groupedDataWide)
test_that("ICD decimal -> short Error",
{str(auto_df2, "11 variables")})
test_that("ICD decimal -> short Error",
{str(groupedDataWide, "11 variables")})
test_that("ICD decimal -> short Error",
{expect_output(str(groupedDataWide), "11 variables")})
df6 <- data.table("ID" = "A0", "CCS_LVL_3_LABEL" = "Chronic kidney disease", "era" = 1L,  "firstCaseDate" = as.Date("2009-07-25"), "endCaseDate" = as.Date("2009-07-25"), "count" = 1, "period" = as.difftime(0, units = "days"))
era1 <- getConditionEra(sampleDxFile, ID, ICD, Date, icdVerColName = NULL, "2015-10-01",
groupDataType = CCSlvl3,
selectedCaseFile = selectedCaseFile)
test_that("Condition Era",
{ expect_equal(era[1], df6)})
era <- getConditionEra(sampleDxFile, ID, ICD, Date, icdVerColName = NULL, "2015-10-01",
groupDataType = CCSlvl3,
selectedCaseFile = selectedCaseFile)
test_that("Condition Era",
{ expect_equal(era[1], df6)})
era[1]
era <- getConditionEra(sampleDxFile, ID, ICD, Date, icdVerColName = NULL, "2015-10-01",
groupDataType = CCSlvl3)
test_that("Condition Era",
{ expect_equal(era[1], df6)})
record <- getEligiblePeriod(sampleDxFile, ID, Date)
record$endRecordDate[1] - record$firstRecordDate[1]
test_that("Condition Era",
{ expect_equal(record$endRecordDate[1] - record$firstRecordDate[1], as.difftime(7028, units = "days"))})
splitedData <- splitDataByDate(sampleDxFile, ID, ICD, Date, record, gap = 30)
colnames(record)[2] <- "indexDate"
splitedData <- splitDataByDate(sampleDxFile, ID, ICD, Date, record, gap = 30)
splitedData[1]
colnames(record)[2] <- "indexDate"
record[3] <- NULL
splitedData <- splitDataByDate(sampleDxFile, ID, ICD, Date, record, gap = 30)
View(record)
record <- getEligiblePeriod(sampleDxFile, ID, Date)
test_that("Condition Era",
{ expect_equal(record$endRecordDate[1] - record$firstRecordDate[1], as.difftime(7028, units = "days"))})
#split
colnames(record)[2] <- "indexDate"
record$endRecordDate <- NULL
splitedData <- splitDataByDate(sampleDxFile, ID, ICD, Date, record, gap = 30)
View(splitedData)
splitedDate[1]
splitedData[1]
devtools::test()
splitedData[1]
df7 <- data.table("ID" = "A0", "ICD" = "5856", "Date" = as.Date("2009-07-25"), "indexDate" = as.Date("2009-07-25"), "timeTag" = "A", "window" = 1)
test_that("Split",
{ expect_equal(splitedData[1], df7)})
devtools::test()
devtools::test()
library(roxygen2)
library(pkgdown)
roxygenise()
build_reference()
tail(icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$Error)
library(dxpr)
tail(icdDxShortToDecimal(sampleDxFile, ICD, Date, icd10usingDate = "2015/10/01")$Error)
auto_df1$Error[:16]
auto_df1$Error[16]
auto_df3
length(auto_df3$summarised_groupedDT)
str(auto_df3$summarised_groupedDT)
str(auto_df3$groupedDT)
expect_equal(auto_df3$summarised_groupedDT[97]
)
auto_df3$summarised_groupedDT[97]
str(auto_df4$summarised_groupedDT)
auto_df4$summarised_groupedDT[51]
auto_df4$groupedDT
str(auto_df4$groupedDT)
str(auto_df5$summarised_groupedDT)
auto_df5$summarised_groupedDT[153]
str(auto_df4$groupedDT)
str(auto_df5$groupedDT)
devtools::test()
str(auto_df4$groupedDT)
devtools::test()
auto_df4 <- icdDxToComorbid(sampleDxFile, ID, ICD, Date, icdVerColName = NULL, "2015-10-01", charlson)
str(auto_df4$summarised_groupedDT)
str(auto_df4$groupedDT)
devtools::test()
devtools::test()
devtools::test()
str(sc)
str(era)
era[98]
str(record)
str(splitedData)
splitedData[300]
str(groupedDataWide)
devtools::test()
str(record)
devtools::test()
library(roxygen2)
roxygenise()
library(pkgdown)
build_site()
load("~/Documents/GitHub/dxpr/data/ICD10DxwithTwoFormat.rda")
View(ICD10DxwithTwoFormat)
ICD10DxwithTwoFormat<-unique(ICD10DxwithTwoFormat)
save(ICD10DxwithTwoFormat,file="ICD10DxwithTwoFormat.rda")
load("~/Documents/GitHub/dxpr/data/ICD10DxwithTwoFormat.rda")
View(ICD10DxwithTwoFormat)
